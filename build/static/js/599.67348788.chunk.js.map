{"version":3,"file":"static/js/599.67348788.chunk.js","mappings":"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","sources":["components/EmployeeCard.jsx","components/Button.jsx","components/Input.jsx","components/Select.jsx","components/Filter.jsx","components/Pagination.jsx","components/ResetFilter.jsx","services/apiServices.js","components/Dashboard.jsx"],"sourcesContent":["import React from 'react';\r\nimport logo from '../images/img.jpg';\r\nimport '../css/employeeCard.css'\r\nfunction EmployeeCard({ displayName, jobTitle, department, email, manager, ext, location }) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-header text-center bg-primary text-white\">\r\n                {displayName || 'Not Specified'}\r\n            </div>\r\n            <div className=\"card-body text-center\">\r\n                <p className=\"card-text\">{jobTitle || 'Not Specified'}</p>\r\n                <img\r\n                    src={logo}\r\n                    className=\"card-img-top logo\"\r\n                    alt=\"logo\"\r\n                />\r\n                <h6 className=\"card-title\">{department || 'Not Specified'}</h6>\r\n                <span className=\"d-block mb-2\"><b>Email:</b> {email || 'Not Specified'}</span>\r\n                <span className=\"d-block mb-2\"><b>Manager/Report to:</b> </span>\r\n                <p className=\"d-block mb-2\">{manager || 'Not Specified'}</p>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <span><b>Ext:</b> {ext || 'Not Specified'}</span>\r\n                    <span><b>Location:</b> {location || 'Not Specified'}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EmployeeCard;\r\n","import React from 'react'\r\nfunction Button({ text, onClick, className, style }) {\r\n    const handleClick = (e) => {\r\n        if (onClick) {\r\n            onClick(e);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <button\r\n                type='button'\r\n                value={text}\r\n                style={style}\r\n                onClick={handleClick}\r\n                className={className}>\r\n                {text}\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react'\r\n\r\nfunction Input({ type, value, name, id, onChange, placeholder, className }) {\r\n    const handleInputChange = (e) => {\r\n        if (onChange) {\r\n            onChange(e.target.value)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <input type={type}\r\n                value={value} name={name} id={id}\r\n                placeholder={placeholder}\r\n                className={className}\r\n                onChange={handleInputChange} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nfunction Select({ options, className, onChange, text, id, style, value }) {\r\n    const defaultValues = [<option key={0} value=''>{text}</option>];\r\n    const departmentOptions = options.map((option, index) =>\r\n        <option key={index + 1} value={option}>\r\n            {option}\r\n        </option>\r\n    );\r\n    const handleSelectChange = (e) => {\r\n        if (onChange) {\r\n            onChange(e.target.value);\r\n        }\r\n    }\r\n    return (\r\n        <select\r\n            className={className}\r\n            value={value}\r\n            id={id}\r\n            style={style}\r\n            onChange={handleSelectChange}\r\n        >\r\n            {text ? defaultValues.concat(departmentOptions) : departmentOptions}\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default Select;\r\n","import React, { useState } from 'react';\r\nimport Input from './Input';\r\nimport Select from './Select';\r\nimport '../css/filter.css'\r\n\r\nfunction Filter({ search, setSearch, onDepartmentChange, departmentOptions, selectedDepartment, optionSortings, onSortingChange, selectedSorting }) {\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-6 input-container mb-3 mb-md-0\">\r\n                    <Input\r\n                        type={'search'}\r\n                        value={search}\r\n                        name={'search'}\r\n                        id={'search'}\r\n                        onChange={setSearch}\r\n                        className={'form-control'}\r\n                        placeholder={'Search by name, position...'}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-3 d-flex align-items-center mb-3 mb-md-0\">\r\n                    <Select\r\n                        id={'sort'}\r\n                        className={'form-select'}\r\n                        onChange={onSortingChange}\r\n                        options={optionSortings}\r\n                        text={'Sort by...'}\r\n                        value={selectedSorting}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-3 d-flex align-items-center\">\r\n                    <Select\r\n                        className={'form-select'}\r\n                        onChange={onDepartmentChange}\r\n                        options={departmentOptions}\r\n                        id={'departments'}\r\n                        value={selectedDepartment}\r\n                        text={'Filter by departments'}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Filter;\r\n","import React from 'react'\r\nimport Pagination from '@mui/material/Pagination';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nfunction Paginations({ count, page, color, variant, onChange, className }) {\r\n    return (\r\n        <>\r\n            <Stack spacing={2} className={className}>\r\n                <Pagination\r\n                    count={count}\r\n                    page={page}\r\n                    color={color}\r\n                    variant={variant}\r\n                    showFirstButton\r\n                    showLastButton\r\n                    onChange={onChange}\r\n                />\r\n            </Stack>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Paginations;\r\n","import React from 'react';\r\nimport reset from '../images/reset.png';\r\nimport '../css/resetFilter.css';\r\n\r\nfunction ResetFilter({ onClick }) {\r\n    const handleResetFilterClick = () => {\r\n        if (onClick) {\r\n            onClick();\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <img\r\n                className='reset'\r\n                src={reset}\r\n                alt=\"Reset filter\"\r\n                title=\"Reset filter\"\r\n                onClick={handleResetFilterClick}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResetFilter;\r\n","const API_BASE_URL = 'http://localhost:4000/Employees';\r\n\r\nexport const fetchEmpData = async () => {\r\n    try {\r\n        const response = await fetch(API_BASE_URL);\r\n        return response;\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport EmployeeCard from './EmployeeCard';\r\nimport Button from './Button';\r\nimport Filter from './Filter';\r\nimport Paginations from './Pagination';\r\nimport Select from './Select';\r\nimport ResetFilter from './ResetFilter';\r\nimport { fetchEmpData } from '../services/apiServices';\r\nimport '../css/dashboard.css';\r\n\r\nexport default function Dashboard() {\r\n    const [data, setData] = useState([]);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [selectedLetter, setSelectedLetter] = useState('All');\r\n    const [selectedDepartment, setSelectedDepartment] = useState('');\r\n    const [selectedSorting, setSelectedSorting] = useState('');\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [recordsPerPage, setRecordsPerPage] = useState(8);\r\n\r\n    //array that display the buttons \r\n    const buttonsArray = [\r\n        'All', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\r\n        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\r\n    ];\r\n    //array that display inside the dropdown\r\n    const sortingArray = [\r\n        'First Name', 'Email', 'Departments'\r\n    ];\r\n    //array that display inside the item per page\r\n    const itemPerPageArray = [8, 12, 16, 32];\r\n\r\n    //function that fetch the data  \r\n    const fetchData = async () => {\r\n        try {\r\n            const result = await fetchEmpData();\r\n            const datas = await result.json();\r\n            setData(datas);\r\n        } catch (error) {\r\n            console.log('Failed to fetch employee data.', error.message);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n    //function that sort the data in ascending order\r\n    const sortBy = (data, criterion) => {\r\n        try {\r\n            return [...data].sort((a, b) => {\r\n                switch (criterion) {\r\n                    case 'Departments':\r\n                        if (a.department === null) return 1;\r\n                        if (b.department === null) return -1;\r\n                        return a.department.localeCompare(b.department);\r\n                    case 'First Name':\r\n                        if (a.displayName === null) return 1;\r\n                        if (b.displayName === null) return -1;\r\n                        return a.displayName.localeCompare(b.displayName);\r\n                    case 'Email':\r\n                        if (a.mail === null) return 1;\r\n                        if (b.mail === null) return -1;\r\n                        return a.mail.localeCompare(b.mail);\r\n                    default:\r\n                        return 0;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log('Failed to sort employee data.', error.message);\r\n            return data;\r\n        }\r\n\r\n    };\r\n    //get the new page if the filteredData more than zero\r\n    useEffect(() => {\r\n        try {\r\n            if (filteredData.length > 0) {\r\n                const newCurrentPage = Math.min(currentPage, Math.ceil(filteredData.length / recordsPerPage));\r\n                setCurrentPage(newCurrentPage);\r\n            }\r\n        } catch (error) {\r\n            console.log('Failed to calculate the current page.', error.message);\r\n        }\r\n    }, [filteredData, recordsPerPage]);\r\n    //filter the records\r\n    useEffect(() => {\r\n        try {\r\n            let result = data;\r\n            if (search.trim() !== '') {\r\n                const lowerCaseSearch = search.trim().toLowerCase();\r\n                result = result.filter((emp) => {\r\n                    const displayName = emp.displayName ? emp.displayName.toLowerCase() : '';\r\n                    const jobTitle = emp.jobTitle ? emp.jobTitle.toLowerCase() : '';\r\n                    return (\r\n                        displayName.includes(lowerCaseSearch) ||\r\n                        jobTitle.includes(lowerCaseSearch)\r\n                    );\r\n                });\r\n            }\r\n            if (selectedLetter && selectedLetter !== 'All') {\r\n                result = result.filter(emp => emp.displayName.startsWith(selectedLetter));\r\n            }\r\n            if (selectedDepartment) {\r\n                result = result.filter(emp => emp.department === selectedDepartment);\r\n            }\r\n            if (selectedSorting) {\r\n                result = sortBy(result, selectedSorting);\r\n            }\r\n            setFilteredData(result);\r\n            setCurrentPage(1);\r\n        } catch (error) {\r\n            console.log('Failed to filter employee data.', error.message);\r\n        }\r\n    }, [search, selectedLetter, selectedDepartment, selectedSorting, data]);\r\n\r\n    //handle the page change \r\n    const handlePageChange = (event, page) => {\r\n        try {\r\n            setCurrentPage(page);\r\n        } catch (error) {\r\n            console.error('Failed to change page.', error.message);\r\n        }\r\n    };\r\n\r\n    //calculate the pages for pagination\r\n    const indexOfLastRecord = currentPage * recordsPerPage;\r\n    const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;\r\n    const currentRecords = filteredData.slice(indexOfFirstRecord, indexOfLastRecord);\r\n\r\n    //get the total pages \r\n    const totalPages = Math.ceil(filteredData.length / recordsPerPage);\r\n    //handle that perform the filter by character\r\n    const handleClick = (item) => {\r\n        try {\r\n            if (item == 'All') {\r\n                handleResetFilters();\r\n                setSelectedLetter(item);\r\n            } else {\r\n                setSelectedLetter(item);\r\n            }\r\n        } catch (error) {\r\n            console.log('Failed to filter by character', error.message);\r\n        }\r\n    };\r\n    //function that filter by departments\r\n    const handleDepartmentChange = (department) => {\r\n        try {\r\n            setSelectedDepartment(department);\r\n        } catch (error) {\r\n            console.log('Failed to filter by departments', error.message);\r\n        }\r\n    };\r\n    //function that sort the data \r\n    const handleSoringChange = (sorting) => {\r\n        try {\r\n            setSelectedSorting(sorting);\r\n        } catch (error) {\r\n            console.log('Failed to sort the data..', error.message);\r\n        }\r\n    };\r\n    //function that remove the filters\r\n    const handleResetFilters = () => {\r\n        try {\r\n            setSearch(\"\");\r\n            setSelectedDepartment('');\r\n            setSelectedSorting('');\r\n            setRecordsPerPage(8);\r\n            setCurrentPage(1);\r\n        } catch (error) {\r\n            console.log('Failed to reset the filters', error.message);\r\n        }\r\n    };\r\n    //get all the departments from the data\r\n    const departments = [...new Set(data.map(emp => emp.department).filter(dep => dep !== null))];\r\n    return (\r\n        <div className=\"container\">\r\n            <div className='row'>\r\n                <div className='col-12 d-flex justify-content-between align-items-center my-2'>\r\n                    <div className='d-flex flex-wrap'>\r\n                        {\r\n                            buttonsArray.map((item, index) => (\r\n                                <Button\r\n                                    key={index}\r\n                                    text={item}\r\n                                    onClick={() => handleClick(item)}\r\n                                    className={`mx-1 ${item === selectedLetter ? 'bg-primary text-white' : 'bg-light text-black'} filterByCharacter`}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='filter-row my-1'>\r\n                <div className='filter-container'>\r\n                    <Filter\r\n                        search={search} setSearch={setSearch}\r\n                        onDepartmentChange={handleDepartmentChange}\r\n                        departmentOptions={departments}\r\n                        selectedDepartment={selectedDepartment}\r\n                        optionSortings={sortingArray}\r\n                        onSortingChange={handleSoringChange}\r\n                        selectedSorting={selectedSorting}\r\n                    />\r\n                </div>\r\n                <div className='resetFilter'>\r\n                    <h4>\r\n                        <ResetFilter onClick={handleResetFilters} />\r\n                    </h4>\r\n                </div>\r\n            </div>\r\n            <ul className=\"row list-unstyled g-2 d-flex justify-content-center my-1\">\r\n                {\r\n                    currentRecords.length > 0 ? currentRecords.map((item, index) => (\r\n                        <li className=\"col-12 col-sm-6 col-md-4 col-lg-3\" key={index}>\r\n                            <EmployeeCard\r\n                                displayName={item.displayName}\r\n                                jobTitle={item.jobTitle}\r\n                                department={item.department}\r\n                                email={item.mail}\r\n                                manager={item.manager}\r\n                                ext={item.businessPhones[0]}\r\n                                location={item.officeLocation}\r\n                            />\r\n                        </li>\r\n                    ))\r\n                        : data.length > 0 ? <p className='text-center'>No employees found...</p> : <p className='text-center'>Loading Data...</p>\r\n                }\r\n            </ul>\r\n            {totalPages > 1 && (\r\n                <div className='d-flex justify-content-start my-3'>\r\n                    <Select\r\n                        id={'itemPerPage'}\r\n                        className={'form-select'}\r\n                        style={{ width: '70px' }}\r\n                        options={itemPerPageArray}\r\n                        value={recordsPerPage}\r\n                        onChange={setRecordsPerPage}\r\n                    />\r\n                    <Paginations className={'mx-2'} variant={'outlined'}\r\n                        count={totalPages}\r\n                        page={currentPage}\r\n                        color={'secondary'}\r\n                        onChange={handlePageChange}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"names":["_ref","displayName","jobTitle","department","email","manager","ext","location","_jsxs","className","children","_jsx","src","alt","text","onClick","style","_Fragment","type","value","e","name","id","onChange","placeholder","target","options","defaultValues","departmentOptions","map","option","index","concat","search","setSearch","onDepartmentChange","selectedDepartment","optionSortings","onSortingChange","selectedSorting","Input","Select","count","page","color","variant","Stack","spacing","Pagination","showFirstButton","showLastButton","reset","title","handleResetFilterClick","fetchEmpData","async","fetch","error","console","log","message","Dashboard","data","setData","useState","filteredData","setFilteredData","selectedLetter","setSelectedLetter","setSelectedDepartment","setSelectedSorting","currentPage","setCurrentPage","recordsPerPage","setRecordsPerPage","useEffect","result","datas","json","fetchData","length","newCurrentPage","Math","min","ceil","trim","lowerCaseSearch","toLowerCase","filter","emp","includes","startsWith","sortBy","criterion","sort","a","b","localeCompare","mail","indexOfLastRecord","indexOfFirstRecord","currentRecords","slice","totalPages","handleResetFilters","departments","Set","dep","item","Button","handleClick","Filter","sorting","ResetFilter","EmployeeCard","businessPhones","officeLocation","width","Paginations","handlePageChange","event"],"sourceRoot":""}